{
  "hash": "077bc55e38c9d4efeba5128043b44649",
  "result": {
    "markdown": "---\ntitle: \"Grammer of Graphics\"\nsubtitle: \"Lecture 3\"\ndate: \"September 5th, 2022\"\n---\n\n\n# Checklist {.smaller}\n\n-- Have a GitHub account and have it connected with R (Lab 0)\n\n-- Have checked the GitHub username sheet\n\n-- Keeping up with the **Prepare** link on course website \n\n--   Go to the course [GitHub org](https://github.com/sta199-f22-2) and find your `ae-02-starwars` (repo name will be suffixed with your GitHub name).\n--   Clone the repo in your container, open the Quarto document in the repo\n\n## **Examining data visualization** {.smaller}\n\n\n::: {.cell}\n\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\nDiscuss the following for the visualization.\n\n--   What is the visualization trying to show?\n\n--   What is effective, i.e. what is done well?\n\n--   What is ineffective, i.e. what could be improved?\n\n--   What are you curious about after looking at the visualization?\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_2d03b9a1\" data-update-every=\"1\" tabindex=\"0\" style=\"bottom:0;left:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n![Source: [Twitter](https://twitter.com/reina_sabah/status/1291509085855260672)](images/03-Grammer-of-Graphics/female-heights.png){fig-align=\"center\"}\n\n:::\n:::\n\n\n## Prepare Reading Questions\n\nhttps://app.sli.do/event/g6fnKCDuZ1sw8NKiZTu3Rb\n\n# Application exercise\n\n## `ae-02-starwars`\n\n\n-   Go to the course [GitHub org](https://github.com/sta199-f22-2) and find your `ae-02-starwars` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n-   Render, commit, and push your edits by the AE deadline -- 3 days from today (Thursday by 11:59p ET.\n\n\n## Match the variables to plots\n\n::: columns\n::: {.column width=\"60%\"}\n\n\n--   1 categorical variable, 1 quantitative variable (often ordinal)\n\n--   2 quantitative variables\n\n--   1 quantitative variable \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_646fe42a\" data-update-every=\"1\" tabindex=\"0\" style=\"bottom:0;left:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"40%\"}\n\n-- geom_hist\n\n-- geom_point\n\n-- geom_bar\n\n:::\n:::\n\n\n\n\n\n\n## Recap of AE {.smaller}\n\n--   Construct plots with `ggplot()`.\n--   Layers of ggplots are separated by `+`s.\n--   The formula is (almost) always as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +\n  geom_XXX()\n```\n:::\n\n\n--   Aesthetic attributes of a geometries (color, size, transparency, etc.) can be **map**ped to variables in the data or **set** by the user.\n\n--   Use `facet_wrap()` when faceting (creating small multiples) by one variable and `facet_grid()` when faceting by two variables.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}